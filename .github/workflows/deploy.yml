name: build-and-deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ghcr.io/reachmagnets-hue/crm-backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha
            type=ref,event=tag
            type=raw,value={{date 'YYYYMMDD-HHmm'}}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: monorepo/backend
          file: monorepo/backend/Dockerfile
          push: true
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:cache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:cache,mode=max
          provenance: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Validate required connection values (secrets or variables)
        run: |
          set -euo pipefail
          for v in VPS_HOST VPS_USER VPS_SSH_KEY VPS_APP_PATH; do
            if [ -z "${!v:-}" ]; then
              echo "Missing required value: $v (set it under Actions Secrets or Variables)" >&2
              exit 1
            fi
          done
        env:
          VPS_HOST: ${{ secrets.VPS_HOST != '' && secrets.VPS_HOST || vars.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER != '' && secrets.VPS_USER || vars.VPS_USER }}
          VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY != '' && secrets.VPS_SSH_KEY || vars.VPS_SSH_KEY }}
          VPS_APP_PATH: ${{ secrets.VPS_APP_PATH != '' && secrets.VPS_APP_PATH || vars.VPS_APP_PATH }}

      - name: SSH sanity check (connectivity + docker)
        uses: appleboy/ssh-action@v1.2.0
        env:
          APP_PATH: ${{ secrets.VPS_APP_PATH != '' && secrets.VPS_APP_PATH || vars.VPS_APP_PATH }}
        with:
          host: ${{ secrets.VPS_HOST != '' && secrets.VPS_HOST || vars.VPS_HOST }}
          username: ${{ secrets.VPS_USER != '' && secrets.VPS_USER || vars.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY != '' && secrets.VPS_SSH_KEY || vars.VPS_SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail
            echo "Host:" $(hostname)
            docker --version
            docker compose version || docker-compose version || true
            ls -la "$APP_PATH" || true

      - name: Copy compose and caddy to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST != '' && secrets.VPS_HOST || vars.VPS_HOST }}
          username: ${{ secrets.VPS_USER != '' && secrets.VPS_USER || vars.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY != '' && secrets.VPS_SSH_KEY || vars.VPS_SSH_KEY }}
          source: |
            monorepo/infra/docker-compose.prod.yml
            monorepo/infra/Caddyfile
          target: ${{ secrets.VPS_APP_PATH != '' && secrets.VPS_APP_PATH || vars.VPS_APP_PATH }}

      - name: Prepare Hostinger Compose UI folder (optional)
        uses: appleboy/ssh-action@v1.2.0
        env:
          APP_PATH: ${{ secrets.VPS_APP_PATH != '' && secrets.VPS_APP_PATH || vars.VPS_APP_PATH }}
        with:
          host: ${{ secrets.VPS_HOST != '' && secrets.VPS_HOST || vars.VPS_HOST }}
          username: ${{ secrets.VPS_USER != '' && secrets.VPS_USER || vars.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY != '' && secrets.VPS_SSH_KEY || vars.VPS_SSH_KEY }}
          script_stop: false
          script: |
            set -euo pipefail
            mkdir -p "$APP_PATH/auto_body"
            cp -f "$APP_PATH/docker-compose.prod.yml" "$APP_PATH/auto_body/docker-compose.yml" || true
            cp -f "$APP_PATH/Caddyfile" "$APP_PATH/auto_body/Caddyfile" || true
            if [ -f "$APP_PATH/.env" ]; then cp -f "$APP_PATH/.env" "$APP_PATH/auto_body/.env"; fi

      - name: Write prod .env on VPS (if provided)
        uses: appleboy/ssh-action@v1.2.0
        env:
          PROD_ENV: ${{ secrets.PROD_ENV != '' && secrets.PROD_ENV || vars.PROD_ENV }}
          APP_PATH: ${{ secrets.VPS_APP_PATH != '' && secrets.VPS_APP_PATH || vars.VPS_APP_PATH }}
        with:
          host: ${{ secrets.VPS_HOST != '' && secrets.VPS_HOST || vars.VPS_HOST }}
          username: ${{ secrets.VPS_USER != '' && secrets.VPS_USER || vars.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY != '' && secrets.VPS_SSH_KEY || vars.VPS_SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail
            # Create data directories with or without sudo (Hostinger may not allow sudo)
            mkdir -p /opt/rag-data /opt/rag-chroma || sudo mkdir -p /opt/rag-data /opt/rag-chroma || true
            chown -R $(whoami):$(whoami) /opt/rag-data /opt/rag-chroma || sudo chown -R $(whoami):$(whoami) /opt/rag-data /opt/rag-chroma || true
            mkdir -p "$APP_PATH"
            if [ -n "${PROD_ENV}" ]; then echo "$PROD_ENV" | base64 -d > "$APP_PATH/.env"; fi

      - name: Log in to GHCR on VPS (required if image is private)
        uses: appleboy/ssh-action@v1.2.0
        env:
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
        with:
          host: ${{ secrets.VPS_HOST != '' && secrets.VPS_HOST || vars.VPS_HOST }}
          username: ${{ secrets.VPS_USER != '' && secrets.VPS_USER || vars.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY != '' && secrets.VPS_SSH_KEY || vars.VPS_SSH_KEY }}
          script_stop: false
          script: |
            set -euo pipefail
            if [ -n "${GHCR_USERNAME:-}" ] && [ -n "${GHCR_PAT:-}" ]; then
              echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin || true
            else
              echo "Skipping GHCR login on VPS (no credentials provided). Ensure package is public or set GHCR_USERNAME and GHCR_PAT secrets." >&2
            fi

      - name: Deploy via docker compose
        uses: appleboy/ssh-action@v1.2.0
        env:
          APP_PATH: ${{ secrets.VPS_APP_PATH != '' && secrets.VPS_APP_PATH || vars.VPS_APP_PATH }}
          IMAGE: ghcr.io/reachmagnets-hue/crm-backend:latest
        with:
          host: ${{ secrets.VPS_HOST != '' && secrets.VPS_HOST || vars.VPS_HOST }}
          username: ${{ secrets.VPS_USER != '' && secrets.VPS_USER || vars.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY != '' && secrets.VPS_SSH_KEY || vars.VPS_SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail
            cd "$APP_PATH"
            if docker compose version >/dev/null 2>&1; then DC="docker compose"; \
            elif command -v docker-compose >/dev/null 2>&1; then DC="docker-compose"; \
            else echo "docker compose not installed" >&2; exit 1; fi
            echo "Pulling image: $IMAGE"
            docker pull "$IMAGE" || echo "Warning: docker pull failed (may rely on compose)" >&2
            $DC -f docker-compose.prod.yml pull
            IMAGE=$IMAGE $DC -f docker-compose.prod.yml up -d
            $DC -f docker-compose.prod.yml ps

      - name: Smoke test health endpoint
        uses: appleboy/ssh-action@v1.2.0
        env:
          APP_PATH: ${{ secrets.VPS_APP_PATH != '' && secrets.VPS_APP_PATH || vars.VPS_APP_PATH }}
        with:
          host: ${{ secrets.VPS_HOST != '' && secrets.VPS_HOST || vars.VPS_HOST }}
          username: ${{ secrets.VPS_USER != '' && secrets.VPS_USER || vars.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY != '' && secrets.VPS_SSH_KEY || vars.VPS_SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail
            # Wait for nginx/back-end to respond on /health
            for i in $(seq 1 20); do
              if curl -fsS http://localhost/health | grep -q '"ok":'; then
                echo "Health check passed"; exit 0;
              fi
              echo "Waiting for service... ($i)"; sleep 3;
            done
            echo "Health check failed, showing diagnostics" >&2
            cd "$APP_PATH"
            if docker compose version >/dev/null 2>&1; then DC="docker compose"; \
            elif command -v docker-compose >/dev/null 2>&1; then DC="docker-compose"; \
            else DC="echo 'no docker compose'"; fi
            $DC -f docker-compose.prod.yml logs --no-color --tail=200 backend || true
            $DC -f docker-compose.prod.yml logs --no-color --tail=200 caddy || true
            $DC -f docker-compose.prod.yml ps || true
            docker images | grep -i crm-backend || true
            docker network ls || true
            exit 1
